# Load required libraries
library(dplyr)
library(tidyr)
library(lubridate)
locations = read.csv('../data/all_locations.csv', header = TRUE, sep = ",")
head(locations)
#data tidying
locations <- locations %>%
mutate(datetime = mdy_hm(datetime)) %>% # convert datetime col to datetime format
separate(datetime, into = c("date", "time"), sep = " ") %>% # split datetime column into date and time
select(acc, lat, long, date, time) %>% # remove additional count column
distinct()  # remove duplicates
head(locations)
library(ggplot2)
library(maps)
# print summary statistics
summary(locations)
# time series plot
# now plot avereage line fit on the scatter plot
# ggplot(locations, aes(x = date, y = acc)) +
#   geom_point() +
#   geom_smooth(method = "lm", se = FALSE) +
#   labs(title = "Time Series of Accuracy", x = "Date", y = "Accuracy") +
#   theme_minimal()
# heat map plot
# Get the coordinate limits from the data
# lat_range <- range(locations$lat, na.rm = TRUE)
# long_range <- range(locations$long, na.rm = TRUE)
#
# # Heatmap Plot with World Map Overlay and Coordinate Limits
# ggplot(locations, aes(x = long, y = lat)) +
#   borders("world", colour = "gray30", fill = "grey80") +  # Overlay world map
#   stat_density_2d(aes(fill = ..level..), geom = "polygon", alpha = 0.6) +  # Semi-transparent density overlay
#   scale_fill_viridis_c() +
#   coord_cartesian(xlim = long_range, ylim = lat_range) +  # Set coordinate limits
#   labs(title = "Spatial Density of Records with World Map", x = "Longitude", y = "Latitude") +
#   theme_minimal()
# Faceted Plot (optional: to visualize data over time by month)
# Extract month and year for faceting
# locations$month <- month(locations$date, label = TRUE)
#
# ggplot(locations, aes(x = long, y = lat)) +
#   stat_density_2d(aes(fill = ..level..), geom = "polygon") +
#   scale_fill_viridis_c() +
#   labs(title = "Spatial Density by Month", x = "Longitude", y = "Latitude") +
#   theme_minimal() +
#   facet_wrap(~ month)
library(ggplot2)
# Get the coordinate limits from the data
lat_range <- range(locations$lat, na.rm = TRUE)
long_range <- range(locations$long, na.rm = TRUE)
# Basic map plot using ggplot2
# w/coordinates based on max vals of data lat and long
geoMap <- ggplot(locations, aes(x = long, y = lat)) +
geom_point(size = 5, alpha = 0.25) +
borders("world", colour = "gray30", fill = "grey") +
coord_cartesian(xlim = long_range, ylim = lat_range) +
ggtitle("Total visited Locations")
geoMap
# location_summary <- locations %>%
#   mutate(datetime = mdy_hm(datetime),
#          date = as.Date(datetime),
#          month = month(date),
#          lat = round(lat, 4),
#          long = round(long, 4)) %>% # probably can change the amount. I used it for avoiding duplication.
#   group_by(lat, long, month) %>%
#   summarise(staying_time = sum(as.numeric(difftime(max(datetime), min(datetime), units = "hours")))) %>%
#   ungroup()
#
# location_summary
library(sf)
library(dbscan)
# convert to sf
locations_sf <- locations %>%
st_as_sf(coords = c("long", "lat"), crs = 4326)
# Run DBSCAN
set.seed(100)
clusters <- dbscan(st_coordinates(locations_sf), eps = 0.0005, minPts = 5) # eps = 50m works fine
# Add ID
locations <- locations %>%
mutate(
cluster = clusters$cluster
)
# Calculate summary statistics by cluster
location_summary <- locations %>%
mutate(month = month(as.Date(date))) %>%
group_by(cluster, month) %>%
summarise(
lat = mean(lat),
long = mean(long),
staying_time = sum(
as.numeric(
difftime(
max(as.POSIXct(paste(date, time))),
min(as.POSIXct(paste(date, time))),
units = "hours"
)
)
)
) %>%
ungroup()
location_summary
# Plotting Cluster
plot(locations_sf, col = clusters$cluster + 1, pch = 19, cex = 0.5, main="DBSCAN Clustered Data")
top_locations <- location_summary %>%
# Filter out noise points (cluster = 0)
filter(cluster != 0) %>%
group_by(month) %>%
arrange(desc(staying_time), .by_group = TRUE) %>%
slice_head(n = 5) %>%
ungroup()
# top_locations_split <- top_locations %>%
#   group_split(month)
top5_locations_per_month <- split(top_locations, top_locations$month)
top5_locations_per_month
library(patchwork)  # For arranging multiple plots
# Create a list to store all plots
plot_list <- list()
# Create individual plots for each month
for (i in seq_along(top5_locations_per_month)) {
top5_locations <- top5_locations_per_month[[i]]
# Calculate buffer for zoom (20% of the range)
long_buffer <- (max(top5_locations$long) - min(top5_locations$long)) * 1.2
lat_buffer <- (max(top5_locations$lat) - min(top5_locations$lat)) * 1.2
# Create the plot
p <- ggplot() +
# Add world map background
borders("world", colour = "gray50", fill = "gray95") +
# Add points
geom_point(data = top5_locations,
aes(x = long, y = lat,
size = staying_time,
color = factor(cluster))) +
# Add labels
geom_text(data = top5_locations,
aes(x = long, y = lat,
label = sprintf("%.1f mins", staying_time)),
vjust = -1, hjust = -0.2, size = 3) +
# Customize scales
scale_size_continuous(range = c(3, 10),
name = "Staying Time (mins)") +
scale_color_viridis_d(name = "Cluster") +
# Add titles and theme
labs(title = paste("Month", i),
x = "Longitude",
y = "Latitude") +
theme_minimal() +
# Focus map on points
coord_quickmap(
xlim = c(min(top5_locations$long) - long_buffer,
max(top5_locations$long) + long_buffer),
ylim = c(min(top5_locations$lat) - lat_buffer,
max(top5_locations$lat) + lat_buffer)
) +
theme(
plot.title = element_text(size = 12, face = "bold"),
legend.position = "bottom",
legend.box = "vertical"
)
# Store the plot
plot_list[[i]] <- p
}
# Print individual plots one by one
for (p in plot_list) {
print(p)
}
total_time_key <- location_summary %>%
arrange(desc(staying_time)) %>%
ungroup()
total_time_key
